<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Infinity Tic Tac Toe</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    body {
      font-family: 'Poppins', sans-serif;
      background-color: #000;
      color: white;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      overflow: hidden;
    }

    h1 {
      color: white;
      font-size: 2.5rem;
      margin-bottom: 20px;
      position: relative;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: rgba(255, 255, 255, 0.1);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      max-width: 400px;
      backdrop-filter: blur(10px);
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 10px;
    }

    .cell {
      width: 100px;
      height: 100px;
      background-color: #000;
      border: 2px solid #fff;
      border-radius: 15px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      color: white;
      font-size: 2.5rem;
      transition: background-color 0.3s, box-shadow 0.3s;
    }

    .cell:hover {
      background-color: #333;
    }

    .cell.clicked span {
      color: white;
      transform: scale(1.2);
    }

    .info {
      margin: 20px 0;
      text-align: center;
    }

    .info p {
      margin: 5px 0;
      font-size: 1rem;
      color: white;
    }

    button {
      padding: 12px 20px;
      border: none;
      background-color: white;
      color: black;
      border-radius: 8px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s, box-shadow 0.3s;
      margin-top: 10px;
    }

    button:hover {
      background-color: #ddd;
      box-shadow: 0 4px 12px rgba(255, 255, 255, 0.3);
    }

    button + button {
      margin-left: 10px;
    }
  </style>
</head>
<body>

  <div class="container">
    <h1>Infinity Tic Tac Toe</h1>
    <div class="board" id="board">
      <div class="cell" data-index="0"><span></span></div>
      <div class="cell" data-index="1"><span></span></div>
      <div class="cell" data-index="2"><span></span></div>
      <div class="cell" data-index="3"><span></span></div>
      <div class="cell" data-index="4"><span></span></div>
      <div class="cell" data-index="5"><span></span></div>
      <div class="cell" data-index="6"><span></span></div>
      <div class="cell" data-index="7"><span></span></div>
      <div class="cell" data-index="8"><span></span></div>
    </div>

    <div class="info">
      <p id="status">Current Player: X</p>
      <p>Time: <span id="timer">0</span> seconds</p>
      <p>Moves: <span id="moveCount">0</span></p>
    </div>

    <button id="restart">Restart Game</button>
    <button id="share">Share Game</button>
  </div>

  <script>
    let board = Array(9).fill(null);
    let currentPlayer = 'X';
    let moves = 0;
    let moveHistory = { 'X': [], 'O': [] };
    let gameActive = true;
    let timer;
    let seconds = 0;

    const boardElement = document.getElementById('board');
    const statusElement = document.getElementById('status');
    const timerElement = document.getElementById('timer');
    const moveCountElement = document.getElementById('moveCount');
    const restartButton = document.getElementById('restart');
    const shareButton = document.getElementById('share');

    // Timer Function
    function startTimer() {
      timer = setInterval(() => {
        seconds++;
        timerElement.textContent = seconds;
      }, 1000);
    }

    // Stop the timer
    function stopTimer() {
      clearInterval(timer);
    }

    // Check for a winner
    function checkWinner() {
      const winCombinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
      ];

      for (let combo of winCombinations) {
        const [a, b, c] = combo;
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
          return board[a];
        }
      }
      return null;
    }

    // Handle Cell Click
    function handleCellClick(event) {
      const index = event.target.getAttribute('data-index');

      if (!gameActive || board[index]) return;

      board[index] = currentPlayer;
      event.target.querySelector('span').textContent = currentPlayer;
      event.target.classList.add('clicked');

      // Track move history
      moveHistory[currentPlayer].push(index);
      if (moveHistory[currentPlayer].length > 3) {
        const oldMove = moveHistory[currentPlayer].shift();
        board[oldMove] = null;
        const oldCell = document.querySelector(`[data-index="${oldMove}"]`);
        oldCell.querySelector('span').textContent = '';
        oldCell.classList.remove('clicked');
      }

      moves++;
      moveCountElement.textContent = moves;

      // Check for a winner
      const winner = checkWinner();
      if (winner) {
        statusElement.textContent = `Player ${winner} wins!`;
        gameActive = false;
        stopTimer();
        return;
      }

      // Switch player
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusElement.textContent = `Current Player: ${currentPlayer}`;
    }

    // Restart Game
    function restartGame() {
      board.fill(null);
      moveHistory = { 'X': [], 'O': [] };
      gameActive = true;
      moves = 0;
      seconds = 0;
      timerElement.textContent = '0';
      moveCountElement.textContent = '0';
      statusElement.textContent = 'Current Player: X';
      currentPlayer = 'X';
      document.querySelectorAll('.cell span').forEach(cell => {
        cell.textContent = '';
        cell.parentElement.classList.remove('clicked');
      });
      startTimer();
    }

    // Share Game
    function shareGame() {
      const gameStatus = statusElement.textContent;
      const gameTime = timerElement.textContent;
      const moveCount = moveCountElement.textContent;

      const shareData = {
        title: 'Infinity Tic Tac Toe',
        text: `Game Status: ${gameStatus}. Time: ${gameTime} seconds. Moves: ${moveCount}.`,
        url: window.location.href
      };

      if (navigator.share) {
        navigator.share(shareData)
          .then(() => console.log('Game shared successfully!'))
          .catch(err => console.log('Error sharing the game:', err));
      } else {
        alert('Sharing not supported in this browser.');
      }
    }

    // Set up event listeners
    boardElement.addEventListener('click', handleCellClick);
    restartButton.addEventListener('click', restartGame);
    shareButton.addEventListener('click', shareGame);

    // Start the game timer on page load
    startTimer();
  </script>

</body>
</html>
